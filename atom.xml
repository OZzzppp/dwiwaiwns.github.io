<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dwiwaiwns&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dwiwaiwns.github.io/"/>
  <updated>2019-06-19T08:47:30.569Z</updated>
  <id>https://dwiwaiwns.github.io/</id>
  
  <author>
    <name>dwiwaiwns</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Deepin 安装 SecureCRT</title>
    <link href="https://dwiwaiwns.github.io/uncategorized/000012-deepin-securecrt/"/>
    <id>https://dwiwaiwns.github.io/uncategorized/000012-deepin-securecrt/</id>
    <published>2019-06-19T05:00:00.000Z</published>
    <updated>2019-06-19T08:47:30.569Z</updated>
    
    <content type="html"><![CDATA[<p>deepin linux 安装 SecureCRT 步骤以及问题解决</p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#1-%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85">1 下载安装包</a></li><li><a href="#2-%E8%A7%A3%E5%8E%8B%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%9B%AE%E5%BD%95">2 解压到自己的程序目录</a></li><li><a href="#3-%E4%B8%8B%E8%BD%BD%E6%BF%80%E6%B4%BB%E6%96%87%E4%BB%B6">3 下载激活文件</a></li><li><a href="#4-%E6%89%A7%E8%A1%8C%E6%BF%80%E6%B4%BB%E6%96%87%E4%BB%B6%E6%BF%80%E6%B4%BB%E8%87%AA%E5%B7%B1%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84securecrt">4 执行激活文件，激活自己目录下的SecureCRT</a></li><li><a href="#5-%E8%BF%90%E8%A1%8C">5 运行</a></li><li><a href="#6-%E5%8F%AF%E8%83%BD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98">6 可能遇到的问题</a><ul><li><a href="#61-libjpegso8-%E9%97%AE%E9%A2%98">6.1 libjpeg.so.8 问题</a></li><li><a href="#62-%E9%97%AE%E9%A2%98%E8%AF%A6%E6%83%85">6.2 问题详情：</a></li><li><a href="#63-%E8%A7%A3%E5%86%B3%E6%AD%A5%E9%AA%A4">6.3 解决步骤</a><ul><li><a href="#631-%E4%B8%8B%E8%BD%BD-libjpeg">6.3.1 下载 libjpeg</a></li><li><a href="#632-%E5%AE%89%E8%A3%85-libjpeg">6.3.2 安装 libjpeg</a></li><li><a href="#633-%E9%85%8D%E7%BD%AE-libjpegso8-%E8%B7%AF%E5%BE%84">6.3.3 配置 libjpeg.so.8 路径</a><ul><li><a href="#6331-%E5%B0%86-libjpegso8-%E7%9A%84%E8%B7%AF%E5%BE%84usrlocallib%E6%B7%BB%E5%8A%A0%E5%88%B0etcldsoconf-%E6%96%87%E4%BB%B6">6.3.3.1 将 libjpeg.so.8 的路径/usr/local/lib添加到/etc/ld.so.conf 文件</a></li><li><a href="#6332-%E5%B0%86-libjpegso8-%E8%B7%AF%E5%BE%84%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">6.3.3.2 将 libjpeg.so.8 路径添加到环境变量</a></li><li><a href="#6333-%E6%89%A7%E8%A1%8C-ldconfig-%E5%91%BD%E4%BB%A4">6.3.3.3 执行 ldconfig 命令</a></li></ul></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="1-下载安装包">1 下载安装包</span><a href="#1-下载安装包" class="header-anchor">#</a></h1><p>下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.vandyke.com</span><br></pre></td></tr></table></figure><h1><span id="2-解压到自己的程序目录">2 解压到自己的程序目录</span><a href="#2-解压到自己的程序目录" class="header-anchor">#</a></h1><h1><span id="3-下载激活文件">3 下载激活文件</span><a href="#3-下载激活文件" class="header-anchor">#</a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.boll.me/securecrt_linux_crack.pl</span><br></pre></td></tr></table></figure><h1><span id="4-执行激活文件激活自己目录下的securecrt">4 执行激活文件，激活自己目录下的SecureCRT</span><a href="#4-执行激活文件激活自己目录下的securecrt" class="header-anchor">#</a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo perl securecrt_linux_crack.pl /usr/bin/SecureCRT</span><br></pre></td></tr></table></figure><h1><span id="5-运行">5 运行</span><a href="#5-运行" class="header-anchor">#</a></h1><p>在SecureCRT目录下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./SecureCRT</span><br></pre></td></tr></table></figure><h1><span id="6-可能遇到的问题">6 可能遇到的问题</span><a href="#6-可能遇到的问题" class="header-anchor">#</a></h1><h2><span id="61-libjpegso8-问题">6.1 libjpeg.so.8 问题</span><a href="#61-libjpegso8-问题" class="header-anchor">#</a></h2><h2><span id="62-问题详情">6.2 问题详情：</span><a href="#62-问题详情" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./SecureCRT: error while loading shared libraries: libjpeg.so.8: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><h2><span id="63-解决步骤">6.3 解决步骤</span><a href="#63-解决步骤" class="header-anchor">#</a></h2><h3><span id="631-下载-libjpeg">6.3.1 下载 libjpeg</span><a href="#631-下载-libjpeg" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.ijg.org/jpegsrc.v8c.tar.gz</span><br></pre></td></tr></table></figure><h3><span id="632-安装-libjpeg">6.3.2 安装 libjpeg</span><a href="#632-安装-libjpeg" class="header-anchor">#</a></h3><p>解压后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">＃make test</span><br></pre></td></tr></table></figure><p>最后一条命令make test是用来测试这个库是否安装成功的，执行这个命令后，你会看到 libjpeg 解压后所在目录下多了几张图片等，就是这个命令生成的。最后还可以用 make clean 来清理一些临时文件。</p><p>参考地址 <a href="http://blog.sina.com.cn/s/blog_7956a73c0100wj9s.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_7956a73c0100wj9s.html</a></p><h3><span id="633-配置-libjpegso8-路径">6.3.3 配置 libjpeg.so.8 路径</span><a href="#633-配置-libjpegso8-路径" class="header-anchor">#</a></h3><h4><span id="6331-将-libjpegso8-的路径usrlocallib添加到etcldsoconf-文件">6.3.3.1 将 libjpeg.so.8 的路径/usr/local/lib添加到/etc/ld.so.conf 文件</span><a href="#6331-将-libjpegso8-的路径usrlocallib添加到etcldsoconf-文件" class="header-anchor">#</a></h4><h4><span id="6332-将-libjpegso8-路径添加到环境变量">6.3.3.2 将 libjpeg.so.8 路径添加到环境变量</span><a href="#6332-将-libjpegso8-路径添加到环境变量" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib&apos; &gt;&gt; ~/.bashrc</span><br><span class="line">sources ~/.bashrc</span><br></pre></td></tr></table></figure><h4><span id="6333-执行-ldconfig-命令">6.3.3.3 执行 ldconfig 命令</span><a href="#6333-执行-ldconfig-命令" class="header-anchor">#</a></h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;deepin linux 安装 SecureCRT 步骤以及问题解决&lt;/p&gt;
    
    </summary>
    
    
      <category term="Deepin" scheme="https://dwiwaiwns.github.io/tags/Deepin/"/>
    
      <category term="Linux" scheme="https://dwiwaiwns.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>GitBook书单</title>
    <link href="https://dwiwaiwns.github.io/uncategorized/000011-gitbook-list/"/>
    <id>https://dwiwaiwns.github.io/uncategorized/000011-gitbook-list/</id>
    <published>2019-03-26T07:41:00.000Z</published>
    <updated>2019-06-19T08:47:30.570Z</updated>
    
    <content type="html"><![CDATA[<p>GitBook书单，持续更新……</p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#java">Java</a></li><li><a href="#redis">Redis</a></li><li><a href="#elasticsearch">ElasticSearch</a></li></ul><!-- tocstop --></div><h2><span id="java">Java</span><a href="#java" class="header-anchor">#</a></h2><p><a href="https://legacy.gitbook.com/book/quanke/think-in-java/details" target="_blank" rel="noopener">《Java 编程思想》（Thinking in Java）</a></p><p><a href="https://legacy.gitbook.com/book/wizardforcel/the-art-of-programming-by-july/details" target="_blank" rel="noopener">《编程之法：面试和算法心得》</a></p><p><a href="https://legacy.gitbook.com/book/jiapengcai/effective-java/details" target="_blank" rel="noopener">《Effective Java》第三版中文版</a> （很尴尬，不完整，算是找到的最多的一个）</p><h2><span id="redis">Redis</span><a href="#redis" class="header-anchor">#</a></h2><p><a href="https://www.kancloud.cn/kancloud/redisbook/63822" target="_blank" rel="noopener">《Redis 设计与实现》</a></p><h2><span id="elasticsearch">ElasticSearch</span><a href="#elasticsearch" class="header-anchor">#</a></h2><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">《Elasticsearch: 权威指南》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitBook书单，持续更新……&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://dwiwaiwns.github.io/tags/Java/"/>
    
      <category term="Book" scheme="https://dwiwaiwns.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>synchronized实现原理</title>
    <link href="https://dwiwaiwns.github.io/uncategorized/000010-java-synchronized/"/>
    <id>https://dwiwaiwns.github.io/uncategorized/000010-java-synchronized/</id>
    <published>2018-12-21T03:30:00.000Z</published>
    <updated>2019-06-19T08:47:30.569Z</updated>
    
    <content type="html"><![CDATA[<p>传送门：</p><p><a href="https://blog.csdn.net/javazejian/article/details/72828483" target="_blank" rel="noopener">深入理解Java并发之synchronized实现原理</a><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;传送门：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/javazejian/article/details/72828483&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解Java并发之synchronized实现原
      
    
    </summary>
    
    
      <category term="Java" scheme="https://dwiwaiwns.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>IntrospectorCleanupListener的作用</title>
    <link href="https://dwiwaiwns.github.io/uncategorized/000009-IntrospectorCleanupListener/"/>
    <id>https://dwiwaiwns.github.io/uncategorized/000009-IntrospectorCleanupListener/</id>
    <published>2018-09-21T03:30:00.000Z</published>
    <updated>2019-06-19T08:47:30.570Z</updated>
    
    <content type="html"><![CDATA[<p>IntrospectorCleanupListener——一个非常重要的Listener</p><a id="more"></a><h2><span id="introspectorcleanuplistener作用">IntrospectorCleanupListener作用</span><a href="#introspectorcleanuplistener作用" class="header-anchor">#</a></h2><p>使用示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.IntrospectorCleanupListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="作用">作用：</span><a href="#作用" class="header-anchor">#</a></h3><ol><li>主要用于解决java.beans.Introspector导致的内存泄漏问题</li><li>该监听器应该配置在web.xml中与Spring相关监听器中的第一个位置</li><li>它是一个在web应用关闭的时候，清除JavaBeans Introspector的监听器。在web.xml中注册这个listener。可以保证在web 应用关闭的时候释放与掉这个web 应用相关的class loader 和由它管理的类</li></ol><h3><span id="关于javabeansintrospector">关于java.beans.Introspector</span><a href="#关于javabeansintrospector" class="header-anchor">#</a></h3><ol><li>JDK中的java.beans.Introspector类的用途是发现Java类是否符合JavaBean规范，如果有的框架或程序用到了Introspector类，那么就会启用一个系统级别的缓存，此缓存会存放一些曾加载并分析过的JavaBean的引用。当Web服务器关闭时，由于此缓存中存放着这些JavaBean的引用，所以垃圾回收器无法回收Web容器中的JavaBean对象，最后导致内存变大。</li><li>不幸的是，清除Introspector的唯一方式是刷新整个缓冲。这是因为我们没法判断哪些是属于你的应用的引用，所以删除被缓冲的introspection会导致把这台电脑上的所有应用的introspection都删掉。</li><li>一些类库和框架往往会产生这个问题，例如:Struts 和 Quartz。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IntrospectorCleanupListener——一个非常重要的Listener&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="https://dwiwaiwns.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>个人技能栈</title>
    <link href="https://dwiwaiwns.github.io/uncategorized/000008-knowledge-stack/"/>
    <id>https://dwiwaiwns.github.io/uncategorized/000008-knowledge-stack/</id>
    <published>2018-08-08T07:12:00.000Z</published>
    <updated>2019-06-19T08:47:30.569Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="本帖持续更新">本帖持续更新……</span><a href="#本帖持续更新" class="header-anchor">#</a></h2><p><img src="/uncategorized/000008-knowledge-stack/01-knowledge-stack.png" alt="knowledge-stack"><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;本帖持续更新&quot;&gt;本帖持续更新……&lt;/span&gt;&lt;a href=&quot;#本帖持续更新&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/uncategorized/000008-knowledge-stack/0
      
    
    </summary>
    
    
      <category term="Java" scheme="https://dwiwaiwns.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java char 类型转换问题（二）</title>
    <link href="https://dwiwaiwns.github.io/uncategorized/000007-java-char-casts-002/"/>
    <id>https://dwiwaiwns.github.io/uncategorized/000007-java-char-casts-002/</id>
    <published>2018-07-20T08:30:00.000Z</published>
    <updated>2019-06-19T08:47:30.576Z</updated>
    
    <content type="html"><![CDATA[<p>Java 类型强制转换与移位问题二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println((<span class="keyword">int</span>)(<span class="keyword">char</span>)(<span class="keyword">byte</span>) -<span class="number">1</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#%E5%88%86%E6%9E%90">分析</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5byte-1">第一步：(byte) -1</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5charbyte-1">第二步：(char)(byte) -1</a><ul><li><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5intcharbyte-1">第三步：(int)(char)(byte) -1</a></li></ul></li></ul></li></ul><!-- tocstop --></div><p>基于上一篇blog中提到的一个规则，在本文中做一个详细解释，规则内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从较窄的整型转换成较宽的整型时的符号扩展：</span><br><span class="line">如果最初的数值类型是有符号的，那么就执行符号扩展；</span><br><span class="line">如果它是char，那么不管它将要被转换成什么类型，都执行零扩展</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiftTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println((<span class="keyword">int</span>)(<span class="keyword">char</span>)(<span class="keyword">byte</span>) -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65535</span><br></pre></td></tr></table></figure><h2><span id="分析">分析</span><a href="#分析" class="header-anchor">#</a></h2><h3><span id="第一步byte-1">第一步：(byte) -1</span><a href="#第一步byte-1" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int -1的原码：1000 0000 0000 0000 0000 0000 0000 0001</span><br><span class="line">int -1的反码：1111 1111 1111 1111 1111 1111 1111 1110</span><br><span class="line">int -1的补码：1111 1111 1111 1111 1111 1111 1111 1111</span><br></pre></td></tr></table></figure><p>转换为byte时，高位截断，则(byte) -1的补码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">补码：1111 1111</span><br></pre></td></tr></table></figure><h3><span id="第二步charbyte-1">第二步：(char)(byte) -1</span><a href="#第二步charbyte-1" class="header-anchor">#</a></h3><p>从 byte 到 char 的转型比较麻烦一点，因为 byte 是一个有符号类型，而 char 是一个无符号类型。<br>在将一个整数类型转换成另一个宽度更宽的整数类型时，通常是可以保持其数值的，<br>但是却不可能将一个负的 byte 数值表示成一个 char 。<br>因此，从 byte 到 char 的转换被认为不是一个拓宽原始类型的转换，<br>而是一个拓宽并窄化原始类型的转换（<a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html" target="_blank" rel="noopener">widening and narrowing primitive conversion</a>）：byte被转换成了int，而这个int再被转换成了char。</p><p>于是回到文章开头提到的规则，这个规则原话内容应该是出自《Java解惑》，按照规则，变换之后：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">补码：1111 1111 1111 1111</span><br></pre></td></tr></table></figure><h4><span id="第三步intcharbyte-1">第三步：(int)(char)(byte) -1</span><a href="#第三步intcharbyte-1" class="header-anchor">#</a></h4><p>按照规则，char 不管它将要被转换成什么类型，都执行零扩展，则：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">补码：0000 0000 0000 0000 1111 1111 1111 1111</span><br></pre></td></tr></table></figure><p>所以最终结果为：65535</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 类型强制转换与移位问题二&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System.out.println((&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://dwiwaiwns.github.io/tags/Java/"/>
    
      <category term="Java char" scheme="https://dwiwaiwns.github.io/tags/Java-char/"/>
    
      <category term="Java强制类型转换" scheme="https://dwiwaiwns.github.io/tags/Java%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Java char 类型转换问题（一）</title>
    <link href="https://dwiwaiwns.github.io/uncategorized/000006-java-char-casts-001/"/>
    <id>https://dwiwaiwns.github.io/uncategorized/000006-java-char-casts-001/</id>
    <published>2018-07-18T07:30:00.000Z</published>
    <updated>2019-06-19T08:47:30.576Z</updated>
    
    <content type="html"><![CDATA[<p>Java 类型强制转换与移位问题一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = (<span class="keyword">char</span>) -<span class="number">1</span>;</span><br><span class="line">c &gt;&gt;= <span class="number">15</span>;</span><br><span class="line">c &gt;&gt;= <span class="number">17</span>;</span><br><span class="line">c &gt;&gt;= <span class="number">31</span>;</span><br><span class="line">c &gt;&gt;= <span class="number">33</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#1-%E7%96%91%E6%83%91">1. 疑惑</a></li><li><a href="#2-%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0">2. 问题原因</a><ul><li><a href="#21-%E9%97%AE%E9%A2%98a">2.1. 问题a：</a></li><li><a href="#22-%E9%97%AE%E9%A2%98b">2.2. 问题b：</a><ul><li><a href="#221-char-1-15">2.2.1. (char)-1 &gt;&gt;&gt; 15：</a></li><li><a href="#222-char-1-17">2.2.2. (char)-1 &gt;&gt;&gt; 17：</a></li><li><a href="#223-char-1-31">2.2.3. (char)-1 &gt;&gt;&gt; 31：</a></li><li><a href="#224-char-1-33">2.2.4. (char)-1 &gt;&gt;&gt; 33：</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h2><span id="1-疑惑">1. 疑惑</span><a href="#1-疑惑" class="header-anchor">#</a></h2><p>之前在看移位时注意到 char 的几个问题，我们先看一个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShiftTest</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">char</span> c = (<span class="keyword">char</span>) i;</span><br><span class="line">            System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"c's binary str"</span>, Integer.toBinaryString(c)));</span><br><span class="line">            System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"c's char"</span>, c));</span><br><span class="line">            System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"(int)c1"</span>, (<span class="keyword">int</span>) c));</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">char</span> c1 = (<span class="keyword">char</span>) -<span class="number">1</span>;</span><br><span class="line">            System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"c1 binary str"</span>, Integer.toBinaryString(c1)));</span><br><span class="line">            c1 &gt;&gt;= <span class="number">15</span>;</span><br><span class="line">            System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"c1 &gt;&gt;&gt;= 15"</span>, Integer.toBinaryString(c1)));</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">char</span> c2 = (<span class="keyword">char</span>) -<span class="number">1</span>;</span><br><span class="line">            c2 &gt;&gt;= <span class="number">17</span>;</span><br><span class="line">            System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"c2 &gt;&gt;&gt;= 17"</span>, Integer.toBinaryString(c2)));</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">char</span> c3 = (<span class="keyword">char</span>) -<span class="number">1</span>;</span><br><span class="line">            c3 &gt;&gt;= <span class="number">31</span>;</span><br><span class="line">            System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"c3 &gt;&gt;&gt;= 31"</span>, Integer.toBinaryString(c3)));</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">char</span> c4 = (<span class="keyword">char</span>) -<span class="number">1</span>;</span><br><span class="line">            c4 &gt;&gt;= <span class="number">33</span>;</span><br><span class="line">            System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"c4 &gt;&gt;&gt;= 33"</span>, Integer.toBinaryString(c4)));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c&apos;s binary str :1111111111111111</span><br><span class="line">c&apos;s char       :</span><br><span class="line">(int)c1        :65535</span><br><span class="line">c1 binary str  :1111111111111111</span><br><span class="line">c1 &gt;&gt;&gt;= 15     :1</span><br><span class="line">c2 &gt;&gt;&gt;= 17     :0</span><br><span class="line">c3 &gt;&gt;&gt;= 31     :0</span><br><span class="line">c4 &gt;&gt;&gt;= 33     :111111111111111</span><br></pre></td></tr></table></figure><p>第二行在Intellij IDEA里面运行输出的是一个小方框</p><p>这里可以提出我的疑惑了：</p><ul><li>a. int的 -1 强转为 char 后，再强转回 int 的输出为什么是65535</li><li>b. (char)-1右移15、17、31、33位对应的值</li></ul><p>先强调一个知识点——各个数据类型位数长度是不一样的，Java使用的是二进制的补码运算。<br>然后我们针对这两个问题详细分析一下。</p><h2><span id="2-问题原因">2. 问题原因</span><a href="#2-问题原因" class="header-anchor">#</a></h2><h3><span id="21-问题a">2.1. 问题a：</span><a href="#21-问题a" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int -1的原码：1000 0000 0000 0000 0000 0000 0000 0001</span><br><span class="line">int -1的反码：1111 1111 1111 1111 1111 1111 1111 1110</span><br><span class="line">int -1的补码：1111 1111 1111 1111 1111 1111 1111 1111</span><br></pre></td></tr></table></figure><p>第一步强转为char时，高位截断后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">补码：1111 1111 1111 1111</span><br></pre></td></tr></table></figure><p>第二步强转会int时：</p><p>这里需要补充一个规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从较窄的整型转换成较宽的整型时的符号扩展：</span><br><span class="line">如果最初的数值类型是有符号的，那么就执行符号扩展；</span><br><span class="line">如果它是char，那么不管它将要被转换成什么类型，都执行零扩展</span><br></pre></td></tr></table></figure><p>因此，再强转回int时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">补码：0000 0000 0000 0000 1111 1111 1111 1111</span><br></pre></td></tr></table></figure><p>最高位为 0，所以当做正数处理，原反补都一样，转成 10 进制即为 65535</p><h3><span id="22-问题b">2.2. 问题b：</span><a href="#22-问题b" class="header-anchor">#</a></h3><p>char在进行移位操作时分几个步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一步，转成int</span><br><span class="line">第二步，按照int进行移位</span><br><span class="line">第三步，转回char</span><br></pre></td></tr></table></figure><h4><span id="221-char-1-gtgtgt-15">2.2.1. (char)-1 &gt;&gt;&gt; 15：</span><a href="#221-char-1-gtgtgt-15" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">前面说过 (char)-1 的补码:</span><br><span class="line">1111 1111 1111 1111</span><br><span class="line">转为int后:</span><br><span class="line">0000 0000 0000 0000 1111 1111 1111 1111</span><br><span class="line">执行 &gt;&gt;&gt;15：</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 0001</span><br><span class="line">转char：</span><br><span class="line">0000 0000 0000 0001</span><br></pre></td></tr></table></figure><p>所以结果为 1</p><h4><span id="222-char-1-gtgtgt-17">2.2.2. (char)-1 &gt;&gt;&gt; 17：</span><a href="#222-char-1-gtgtgt-17" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">前面说过 (char)-1 的补码:</span><br><span class="line">1111 1111 1111 1111</span><br><span class="line">转为int后:</span><br><span class="line">0000 0000 0000 0000 1111 1111 1111 1111</span><br><span class="line">执行 &gt;&gt;&gt;17：</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 0000</span><br><span class="line">转char：</span><br><span class="line">0000 0000 0000 0000</span><br></pre></td></tr></table></figure><p>所以结果为 0</p><h4><span id="223-char-1-gtgtgt-31">2.2.3. (char)-1 &gt;&gt;&gt; 31：</span><a href="#223-char-1-gtgtgt-31" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">前面说过 (char)-1 的补码:</span><br><span class="line">1111 1111 1111 1111</span><br><span class="line">转为int后:</span><br><span class="line">0000 0000 0000 0000 1111 1111 1111 1111</span><br><span class="line">执行 &gt;&gt;&gt;31：</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 0000</span><br><span class="line">转char：</span><br><span class="line">0000 0000 0000 0000</span><br></pre></td></tr></table></figure><p>所以结果为 0</p><h4><span id="224-char-1-gtgtgt-33">2.2.4. (char)-1 &gt;&gt;&gt; 33：</span><a href="#224-char-1-gtgtgt-33" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">前面说过 (char)-1 的补码:</span><br><span class="line">1111 1111 1111 1111</span><br><span class="line">转为int后:</span><br><span class="line">0000 0000 0000 0000 1111 1111 1111 1111</span><br><span class="line">执行 &gt;&gt;&gt;33：</span><br><span class="line">（这里，需要遵循 int 的移位规则了， 33 超出了 int 类型的长度，33 按 int 位长 32 取余得 1， 相当于 &gt;&gt;&gt; 1）  </span><br><span class="line">0000 0000 0000 0000 0111 1111 1111 1111</span><br><span class="line">转char：</span><br><span class="line">0111 1111 1111 1111</span><br></pre></td></tr></table></figure><p>所以输出结果的二进制字符串是 15 个 1</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 类型强制转换与移位问题一&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;) -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c &amp;gt;&amp;gt;= &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c &amp;gt;&amp;gt;= &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c &amp;gt;&amp;gt;= &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c &amp;gt;&amp;gt;= &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://dwiwaiwns.github.io/tags/Java/"/>
    
      <category term="Java char" scheme="https://dwiwaiwns.github.io/tags/Java-char/"/>
    
      <category term="Java强制类型转换" scheme="https://dwiwaiwns.github.io/tags/Java%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Java移位</title>
    <link href="https://dwiwaiwns.github.io/uncategorized/000005-java-shift/"/>
    <id>https://dwiwaiwns.github.io/uncategorized/000005-java-shift/</id>
    <published>2018-06-28T03:30:00.000Z</published>
    <updated>2019-06-19T08:47:30.568Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Java的数据类型字节长度</li><li>Java的数据类型取值范围</li><li>移位操作……</li></ol><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#1java%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%97%E8%8A%82%E9%95%BF%E5%BA%A6">1.Java的数据类型字节长度</a></li><li><a href="#2java%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4">2.Java的数据类型取值范围</a></li><li><a href="#3%E7%A7%BB%E4%BD%8D%E6%93%8D%E4%BD%9C">3.移位操作</a><ul><li><a href="#31%E5%B7%A6%E7%A7%BB">3.1.左移</a></li><li><a href="#32%E5%8F%B3%E7%A7%BB">3.2.右移</a></li><li><a href="#33%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%8F%B3%E7%A7%BB">3.3.无符号右移</a></li></ul></li></ul><!-- tocstop --></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">移位操作是针对于二进制数来说的，二进制基础，本文不做讲解</span><br></pre></td></tr></table></figure><h2><span id="1java的数据类型字节长度">1.Java的数据类型字节长度</span><a href="#1java的数据类型字节长度" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">byte:8bits</span><br><span class="line">int:32bits</span><br><span class="line">char:16bits</span><br><span class="line">short:16bits</span><br><span class="line">long:64bits</span><br><span class="line">boolean:-</span><br><span class="line">float:32bits</span><br><span class="line">double:64bits</span><br></pre></td></tr></table></figure><h2><span id="2java的数据类型取值范围">2.Java的数据类型取值范围</span><a href="#2java的数据类型取值范围" class="header-anchor">#</a></h2><p><img src="/uncategorized/000005-java-shift/01-data-range.png" alt="data range"><br></p><h2><span id="3移位操作">3.移位操作</span><a href="#3移位操作" class="header-anchor">#</a></h2><p>移位操作符有左移位&lt;&lt;、右移位&gt;&gt;和无符号右移&gt;&gt;&gt;，当然类似于+=这种操作符，也有&lt;&lt;=和&gt;&gt;=</p><h3><span id="31左移">3.1.左移</span><a href="#31左移" class="header-anchor">#</a></h3><p>对于位数左移之后，低位的补0<br><br>例如：3&lt;&lt;2，表示3向左移动两位，3的二进制表示是&quot;11&quot;，左移两位后是&quot;1100&quot;，也就是乘以4即等于12</p><h3><span id="32右移">3.2.右移</span><a href="#32右移" class="header-anchor">#</a></h3><p>和左移不一样的地方就是：如果被位移的数是负数，那么右移之后，高位全都补1；如果是正数，那么右移之后，高位全都补0。也就是正数依然是正数，负数依然是负数。</p><h3><span id="33无符号右移">3.3.无符号右移</span><a href="#33无符号右移" class="header-anchor">#</a></h3><p>这种移位操作与右移不同的地方就是：无论是正数还是负数，在移位之后，高位都补0。即移位之后永远都是正数。</p><p>【注】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（1）无论是左移还是右移（包括无符号右移），如果移动的位数超过规定的bit数，都会与最大移位数取模之后进行计算。</span><br></pre></td></tr></table></figure><p>int类型，3&lt;&lt;33，其实就是3&lt;&lt;1；同理，右移和无符号右移也是一样<br>long型数据，3&lt;&lt;65其实就是3&lt;&lt;1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（2）对于byte和short进行移位运算的时候，会被转换为int型。进行右移的时候，可能会对高位截断</span><br><span class="line">    （byte和short本身比int字节少，因此转成int计算完毕，再转换回去的时候，可能会对高位截断）</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiftTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = -<span class="number">1</span>;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"int i = -1"</span>, Integer.toBinaryString(i)));</span><br><span class="line">        i &gt;&gt;&gt;= <span class="number">10</span>;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"i &gt;&gt;&gt;= 10"</span>, Integer.toBinaryString(i)));</span><br><span class="line">        <span class="keyword">long</span> l = -<span class="number">1</span>;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"long l = -1"</span>, Long.toBinaryString(l)));</span><br><span class="line">        l &gt;&gt;&gt;= <span class="number">10</span>;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"l &gt;&gt;&gt;= 10"</span>, Long.toBinaryString(l)));</span><br><span class="line">        <span class="keyword">short</span> s = -<span class="number">1</span>;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"short s = -1"</span>, Integer.toBinaryString(s)));</span><br><span class="line">        s &gt;&gt;&gt;= <span class="number">10</span>;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"s &gt;&gt;&gt;= 10"</span>, Integer.toBinaryString(s)));</span><br><span class="line">        <span class="keyword">byte</span> b = -<span class="number">1</span>;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"byte b = -1"</span>, Integer.toBinaryString(b)));</span><br><span class="line">        b &gt;&gt;&gt;= <span class="number">10</span>;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"b &gt;&gt;&gt;= 10"</span>, Integer.toBinaryString(b)));</span><br><span class="line">        <span class="keyword">byte</span> c = -<span class="number">1</span>;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"byte c = -1:"</span>, Integer.toBinaryString(c)));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%-15s:%s"</span>, <span class="string">"c &gt;&gt;&gt;= 10:"</span>, Integer.toBinaryString(c &gt;&gt;&gt; <span class="number">10</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int i = -1     :11111111111111111111111111111111</span><br><span class="line">i &gt;&gt;&gt;= 10      :1111111111111111111111</span><br><span class="line">long l = -1    :1111111111111111111111111111111111111111111111111111111111111111</span><br><span class="line">l &gt;&gt;&gt;= 10      :111111111111111111111111111111111111111111111111111111</span><br><span class="line">short s = -1   :11111111111111111111111111111111</span><br><span class="line">s &gt;&gt;&gt;= 10      :11111111111111111111111111111111</span><br><span class="line">byte b = -1    :11111111111111111111111111111111</span><br><span class="line">b &gt;&gt;&gt;= 10      :11111111111111111111111111111111</span><br><span class="line">byte c = -1:   :11111111111111111111111111111111</span><br><span class="line">c &gt;&gt;&gt;= 10:     :1111111111111111111111</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Java的数据类型字节长度&lt;/li&gt;
&lt;li&gt;Java的数据类型取值范围&lt;/li&gt;
&lt;li&gt;移位操作……&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://dwiwaiwns.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java单例模式双重锁（Double-Check）问题</title>
    <link href="https://dwiwaiwns.github.io/uncategorized/000004-double-check/"/>
    <id>https://dwiwaiwns.github.io/uncategorized/000004-double-check/</id>
    <published>2018-06-21T03:30:00.000Z</published>
    <updated>2019-06-19T08:47:30.576Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式 Double-Check 问题</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>很久之前就看到过这个问题，但是并没有完全吃透，现在重新再理解了一次，就想记录下来。</p><p>进入正题，该模式的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123; <span class="comment">// 1</span></span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123; <span class="comment">// 2</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) <span class="comment">// 3</span></span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton(); <span class="comment">// 4</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该模式是对下面代码的改进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123; </span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该模式目的是对 instance 延迟初始化。如果直接加同步锁，也就是保留2、3、4步骤，那么每次访问的时候都需要同步，增加了系统开销，于是有了双重检查模式。</p><p>但是最开始的代码块是有问题的，问题根源在哪呢？</p><p>实际存在的问题是无序性，第4步的操作其实分两个步骤，即分配内存和将 instance 指向内存<br>第4步这个new操作是无序的，它可能会被编译成：</p><ul><li>a. 先分配内存，让 instance 指向这块内存</li><li>b. 在内存中创建对象</li></ul><p>或者：</p><ul><li>a. 在内存中创建对象</li><li>a. 让 instance 指向这个对象</li></ul><p>synchronized 虽然是互斥的，但是如果 new 被编译成第一种方式，线程 t1 执行到 a ，线程 t2 执行到 1。那么 t2 读到的 instance 就可能是 null ,也可能不是 null 。</p><p>如果读到的是null，反而没问题，接下来会继续等待 synchronized 锁；如果读到的不是 null，然后 return instanse，但是 instance 可能还没有执行构造方法，然后去调用的话，很有可能会出现其他问题</p><p>解决方案1：</p><ul><li>1.加 volatile</li><li>2.Initialization on Demand Holder（IODH）</li></ul><p>解决方案2：</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://blog.csdn.net/dl88250/article/details/5439024" target="_blank" rel="noopener">https://blog.csdn.net/dl88250/article/details/5439024</a></li><li><a href="https://blog.csdn.net/anjxue/article/details/51038466" target="_blank" rel="noopener">https://blog.csdn.net/anjxue/article/details/51038466</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式 Double-Check 问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://dwiwaiwns.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://dwiwaiwns.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>annotation-config VS component-scan</title>
    <link href="https://dwiwaiwns.github.io/uncategorized/000003-annotation-config-vs-component-scan/"/>
    <id>https://dwiwaiwns.github.io/uncategorized/000003-annotation-config-vs-component-scan/</id>
    <published>2018-06-08T07:38:00.000Z</published>
    <updated>2019-06-19T08:47:30.570Z</updated>
    
    <content type="html"><![CDATA[<p>context:annotation-config 用于激活那些已经在spring容器里注册过的bean<br>context:component-scan 除了具有context:annotation-config的功能之外，还可以……</p><a id="more"></a><h2><span id="ltcontextannotation-configgt-与-ltcontextcomponent-scangt的区别">&lt;context:annotation-config&gt; 与 &lt;context:component-scan&gt;的区别</span><a href="#ltcontextannotation-configgt-与-ltcontextcomponent-scangt的区别" class="header-anchor">#</a></h2><h6><span id="ltcontextannotation-configgt-用于激活那些已经在spring容器里注册过的bean无论是通过xml的方式还是通过package-sanning的方式上面的注解是一个注解处理工具"><strong><em>&lt;context:annotation-config&gt;</em></strong> 用于激活那些已经在spring容器里注册过的bean（无论是通过xml的方式还是通过package sanning的方式）上面的注解，是一个注解处理工具。</span><a href="#ltcontextannotation-configgt-用于激活那些已经在spring容器里注册过的bean无论是通过xml的方式还是通过package-sanning的方式上面的注解是一个注解处理工具" class="header-anchor">#</a></h6><h6><span id="ltcontextcomponent-scangt-除了具有ltcontextannotation-configgt的功能之外ltcontextcomponent-scangt还可以在指定的package下扫描以及注册java-bean"><strong><em>&lt;context:component-scan&gt;</em></strong> 除了具有&lt;context:annotation-config&gt;的功能之外，&lt;context:component-scan&gt;还可以在指定的package下扫描以及注册Java Bean。</span><a href="#ltcontextcomponent-scangt-除了具有ltcontextannotation-configgt的功能之外ltcontextcomponent-scangt还可以在指定的package下扫描以及注册java-bean" class="header-anchor">#</a></h6><p>【重点】context:annotation-config只处理注册过的bean</p><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/7414794/difference-between-contextannotation-config-vs-contextcomponent-scan/" target="_blank" rel="noopener">https://stackoverflow.com/questions/7414794/difference-between-contextannotation-config-vs-contextcomponent-scan/</a></li><li><a href="https://www.cnblogs.com/leiOOlei/p/3713989.html" target="_blank" rel="noopener">https://www.cnblogs.com/leiOOlei/p/3713989.html</a></li><li><a href="https://blog.csdn.net/baple/article/details/16864835" target="_blank" rel="noopener">https://blog.csdn.net/baple/article/details/16864835</a></li></ul><p>找到好几个完全一样的帖子（日志打印出来对象的ID都一样），我已经傻傻分不清原创（手动捂脸），倾向于stackoverflow原创吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;context:annotation-config 用于激活那些已经在spring容器里注册过的bean&lt;br&gt;
context:component-scan 除了具有context:annotation-config的功能之外，还可以……&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="https://dwiwaiwns.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat 源码（一）—— 源码运行环境</title>
    <link href="https://dwiwaiwns.github.io/uncategorized/000002-tomcat-source-01/"/>
    <id>https://dwiwaiwns.github.io/uncategorized/000002-tomcat-source-01/</id>
    <published>2018-05-17T07:00:00.000Z</published>
    <updated>2019-06-19T08:47:30.569Z</updated>
    
    <content type="html"><![CDATA[<p>Tomcat 源码运行环境配置</p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#1%E4%B8%8B%E8%BD%BD">1.下载</a></li><li><a href="#2%E9%85%8D%E7%BD%AE%E5%B7%A5%E7%A8%8B">2.配置工程</a><ul><li><a href="#21-%E8%A7%A3%E5%8E%8B%E6%96%87%E4%BB%B6">2.1. 解压文件</a></li><li><a href="#22%E9%85%8D%E7%BD%AE%E7%9B%AE%E5%BD%95">2.2.配置目录</a></li><li><a href="#23%E9%85%8D%E7%BD%AE-pom-%E6%96%87%E4%BB%B6">2.3.配置 pom 文件</a><ul><li><a href="#231%E5%9C%A8-tomcat-9-%E7%9B%AE%E5%BD%95%E5%88%9B%E5%BB%BA-pom-%E6%96%87%E4%BB%B6">2.3.1.在 tomcat-9 目录创建 pom 文件</a></li><li><a href="#232%E7%BC%96%E8%BE%91-tomcat-9pomxml">2.3.2.编辑 “tomcat-9/pom.xml”</a></li></ul></li><li><a href="#24%E5%9C%A8idea%E4%B8%AD%E6%89%93%E5%BC%80%E5%B7%A5%E7%A8%8B">2.4.在IDEA中打开工程</a></li><li><a href="#25%E7%BC%96%E8%BE%91-run-config-%E5%8F%82%E6%95%B0">2.5.编辑 run config 参数</a></li></ul></li><li><a href="#3%E8%BF%90%E8%A1%8C%E5%B9%B6%E8%AE%BF%E9%97%AE">3.运行并访问</a></li></ul><!-- tocstop --></div><h6><span id="在-intellij-idea-中打开-tomcat-源码">在 IntelliJ IDEA 中打开 Tomcat 源码</span><a href="#在-intellij-idea-中打开-tomcat-源码" class="header-anchor">#</a></h6><h6><span id="导入工程的方法">导入工程的方法:</span><a href="#导入工程的方法" class="header-anchor">#</a></h6><ul><li>1.通过源码生成eclipse项目，再导入IDEA</li><li>2.直接添加pom文件</li></ul><p>此文档介绍第二种方法在IDEA中打开源码，第一种方法请参考 Apache 官方网站。</p><h2><span id="1下载">1.下载</span><a href="#1下载" class="header-anchor">#</a></h2><p>下载源码（src）以及运行文件（bin），下载地址 <a href="http://tomcat.apache.org/" title="apache" target="_blank" rel="noopener">apache</a><br><img src="/uncategorized/000002-tomcat-source-01/01-download.jpg" alt="download"><br></p><h2><span id="2配置工程">2.配置工程</span><a href="#2配置工程" class="header-anchor">#</a></h2><h3><span id="21-解压文件">2.1. 解压文件</span><a href="#21-解压文件" class="header-anchor">#</a></h3><p><img src="/uncategorized/000002-tomcat-source-01/01-unzip-src-file-list.jpg" alt="src"><br><br><img src="/uncategorized/000002-tomcat-source-01/01-unzip-bin-file-list.jpg" alt="bin"><br></p><h3><span id="22配置目录">2.2.配置目录</span><a href="#22配置目录" class="header-anchor">#</a></h3><ul><li>创建 “tomcat-9” 目录</li><li>创建 “tomcat-source” 目录</li><li>创建 “catalina-home” 目录</li><li>移动 bin 文件到 “catalina-home” 目录</li><li>移动源码文件到 “tomcat-source” 目录</li></ul><h3><span id="23配置-pom-文件">2.3.配置 pom 文件</span><a href="#23配置-pom-文件" class="header-anchor">#</a></h3><h4><span id="231在-tomcat-9-目录创建-pom-文件">2.3.1.在 tomcat-9 目录创建 pom 文件</span><a href="#231在-tomcat-9-目录创建-pom-文件" class="header-anchor">#</a></h4><h4><span id="232编辑-tomcat-9pomxml">2.3.2.编辑 “tomcat-9/pom.xml”</span><a href="#232编辑-tomcat-9pomxml" class="header-anchor">#</a></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Tomcat9.0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Tomcat9.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>Tomcat9.0<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>test<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>test<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxrpc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jdt.core.compiler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ecj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="24在idea中打开工程">2.4.在IDEA中打开工程</span><a href="#24在idea中打开工程" class="header-anchor">#</a></h3><p><img src="/uncategorized/000002-tomcat-source-01/01-open-project.jpg" alt="open"><br></p><h3><span id="25编辑-run-config-参数">2.5.编辑 run config 参数</span><a href="#25编辑-run-config-参数" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-Dcatalina.home=catalina-home</span><br><span class="line">-Dcatalina.base=catalina-home</span><br><span class="line">-Djava.endorsed.dirs=catalina-home/endorsed</span><br><span class="line">-Djava.io.tmpdir=catalina-home/temp</span><br></pre></td></tr></table></figure><p><img src="/uncategorized/000002-tomcat-source-01/01-run-config.jpg" alt="open"><br></p><h2><span id="3运行并访问">3.运行并访问</span><a href="#3运行并访问" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tomcat 源码运行环境配置&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tomcat" scheme="https://dwiwaiwns.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>CentOS下Redis安装与配置</title>
    <link href="https://dwiwaiwns.github.io/uncategorized/000001-centos-redis-install/"/>
    <id>https://dwiwaiwns.github.io/uncategorized/000001-centos-redis-install/</id>
    <published>2018-04-17T06:00:00.000Z</published>
    <updated>2019-06-19T08:47:30.568Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS下安装Redis</p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#%E4%B8%80%E5%AE%89%E8%A3%85redis">一．安装redis</a><ul><li><a href="#1%E4%B8%8B%E8%BD%BDredis%E5%AE%89%E8%A3%85%E5%8C%85">1.下载redis安装包</a></li><li><a href="#2%E8%A7%A3%E5%8E%8B">2.解压</a></li><li><a href="#3%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85">3.编译安装</a></li><li><a href="#3%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-1">3.编译安装</a></li></ul></li><li><a href="#%E4%BA%8C%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">二．修改配置文件</a><ul><li><a href="#1%E5%88%9B%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95dump-file-%E7%9B%AE%E5%BD%95%E8%BF%9B%E7%A8%8Bpid%E7%9B%AE%E5%BD%95log%E7%9B%AE%E5%BD%95%E7%AD%89">1.创建配置文件目录，dump file 目录，进程pid目录，log目录等</a></li><li><a href="#2%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0">2.修改配置文件，配置参数</a></li><li><a href="#3%E6%8C%81%E4%B9%85%E5%8C%96">3.持久化</a></li><li><a href="#4%E5%90%AF%E5%8A%A8redis">4.启动redis</a></li></ul></li><li><a href="#%E4%B8%89%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1">三．配置服务</a><ul><li><a href="#1%E5%88%9B%E5%BB%BAredis%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC">1.创建redis启动脚本</a></li><li><a href="#2%E9%85%8D%E7%BD%AE%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C%E6%9D%83%E9%99%90">2.配置脚本执行权限</a></li><li><a href="#3%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%90%AF%E5%8A%A8">3.设置自启动</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="一安装redis">一．安装redis</span><a href="#一安装redis" class="header-anchor">#</a></h2><h3><span id="1下载redis安装包">1.下载redis安装包</span><a href="#1下载redis安装包" class="header-anchor">#</a></h3><p>可去官网 <a href="http://redis.io" target="_blank" rel="noopener">http://redis.io</a> ,也可通过wget命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-4.0.2.tar.gz</span><br></pre></td></tr></table></figure><p><img src="/uncategorized/000001-centos-redis-install/000.png" alt="下载"></p><h3><span id="2解压">2.解压</span><a href="#2解压" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zvxf redis-4.0.2.tar.gz</span><br></pre></td></tr></table></figure><h3><span id="3编译安装">3.编译安装</span><a href="#3编译安装" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-4.0.2</span><br></pre></td></tr></table></figure><p>make<br></p><ul><li>如果提示&quot;gcc: Command not found&quot;，需安装gcc;<br></li><li>如果提示&quot;couldn’t execute tcl : no such file or dicrectory&quot;, 需安装tcl;<br></li><li>如果提示&quot;zmalloc.h:50:31: error: jemalloc/jemalloc.h: No such file or directory&quot;<br><img src="/uncategorized/000001-centos-redis-install/001.png" alt="make"><br><br>需执行make distclean，然后再make<br><br>或者使用make MALLOC=libc</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make distclean</span><br><span class="line">make MALLOC=libc</span><br></pre></td></tr></table></figure><h3><span id="3编译安装">3.编译安装</span><a href="#3编译安装" class="header-anchor">#</a></h3><ul><li>可手动拷贝src目录下redis-server、redis-cli、redis-check-aof、redis-check-dump等至/usr/local/bin目录下，也可执行make install。此处执行make install<br><br><img src="/uncategorized/000001-centos-redis-install/002.png" alt="make install"><br><br><img src="/uncategorized/000001-centos-redis-install/003.png" alt="usr local bin file"><br></li><li>执行redis-server –v，可查看版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server –v</span><br></pre></td></tr></table></figure><p><img src="/uncategorized/000001-centos-redis-install/004.png" alt="redis version"><br></p><h2><span id="二修改配置文件">二．修改配置文件</span><a href="#二修改配置文件" class="header-anchor">#</a></h2><h3><span id="1创建配置文件目录dump-file-目录进程pid目录log目录等">1.创建配置文件目录，dump file 目录，进程pid目录，log目录等</span><a href="#1创建配置文件目录dump-file-目录进程pid目录log目录等" class="header-anchor">#</a></h3><ul><li>配置文件一般放在/etc/下，创建redis目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/</span><br><span class="line">mkdir redis</span><br></pre></td></tr></table></figure><ul><li>dump file、进程pid、log目录等，一般放在/var/目录下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/</span><br><span class="line">mkdir redis</span><br><span class="line"><span class="built_in">cd</span> redis</span><br><span class="line">mkdir data <span class="built_in">log</span> run</span><br></pre></td></tr></table></figure><p><img src="/uncategorized/000001-centos-redis-install/005.png" alt="dump file、进程pid、log目录"><br></p><h3><span id="2修改配置文件配置参数">2.修改配置文件，配置参数</span><a href="#2修改配置文件配置参数" class="header-anchor">#</a></h3><ul><li>首先拷贝解压包下的redis.conf文件至/etc/redis</li><li>端口<br><br><img src="/uncategorized/000001-centos-redis-install/006.png" alt="端口"></li><li>pid目录<br><br><img src="/uncategorized/000001-centos-redis-install/007.png" alt="pid"></li><li>dump目录<br><br><img src="/uncategorized/000001-centos-redis-install/008.png" alt="dump"></li><li>log存储目录<br><br><img src="/uncategorized/000001-centos-redis-install/009.png" alt="log"></li></ul><h3><span id="3持久化">3.持久化</span><a href="#3持久化" class="header-anchor">#</a></h3><p>默认rdb，可选择是否开启aof，若开启，修改配置文件appendonly</p><h3><span id="4启动redis">4.启动redis</span><a href="#4启动redis" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p><img src="/uncategorized/000001-centos-redis-install/010.png" alt="启动"><br><br>配置为后台启动<br><br><img src="/uncategorized/000001-centos-redis-install/011.png" alt="daemonize"><br><br>改成yes</p><h2><span id="三配置服务">三．配置服务</span><a href="#三配置服务" class="header-anchor">#</a></h2><h3><span id="1创建redis启动脚本">1.创建redis启动脚本</span><a href="#1创建redis启动脚本" class="header-anchor">#</a></h3><p>拷贝解压包下utils下redis启动脚本至/etc/init.d/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis_init_script /etc/init.d/redis</span><br></pre></td></tr></table></figure><p>修改脚本pid及conf路径为实际路径<br><br><img src="/uncategorized/000001-centos-redis-install/012.png" alt="config server script"></p><ul><li>至此，在/etc/init.d/目录下，已经可以通过service redis start/stop 命令启动和关闭redis</li></ul><h3><span id="2配置脚本执行权限">2.配置脚本执行权限</span><a href="#2配置脚本执行权限" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/init.d/redis</span><br></pre></td></tr></table></figure><h3><span id="3设置自启动">3.设置自启动</span><a href="#3设置自启动" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig redis on</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS下安装Redis&lt;/p&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="https://dwiwaiwns.github.io/tags/CentOS/"/>
    
      <category term="Redis" scheme="https://dwiwaiwns.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>develop technology</title>
    <link href="https://dwiwaiwns.github.io/uncategorized/000000-technology/"/>
    <id>https://dwiwaiwns.github.io/uncategorized/000000-technology/</id>
    <published>2018-04-17T05:00:00.000Z</published>
    <updated>2019-06-19T08:47:30.585Z</updated>
    
    <content type="html"><![CDATA[<p>开发测试过程中会使用到的东西</p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#utils">Utils</a></li><li><a href="#test">Test</a></li></ul><!-- tocstop --></div><h2><span id="utils">Utils</span><a href="#utils" class="header-anchor">#</a></h2><p><strong><em>General</em></strong>：Apache Commons 必备。尽量使用 3.0 以上版本。Guava 是 Google 推出的产品，新鲜的功能更多一些。</p><p><strong><em>JSON</em></strong>：Jackon功能强大。</p><p><strong><em>XML</em></strong>：据说 JDK 自带的 JAXB 就很好。</p><p><strong><em>Email</em></strong>：直接用 Spring 的封装。</p><p><strong><em>Logging</em></strong>：slf4j, log4j。</p><p><strong><em>Schedule</em></strong>：使用 Spring 的 Schedule。</p><p><strong><em>时间日期</em></strong>：JodaTime。</p><p><strong><em>io</em></strong>：简单的文件 io 用 apache commons 或者 google guava。zip 文件处理用 zip4j。</p><p><strong><em>读取命令行参数</em></strong>：JCommander是一个简单好用的命令行参数解析框架。</p><h2><span id="test">Test</span><a href="#test" class="header-anchor">#</a></h2><p><strong><em>Spring测试框架</em></strong>：Spring Test/ testng。</p><p><strong><em>Mock</em></strong>：Mockito 是现在最优雅简洁的 mock 框架了，强烈推荐使用。Mockito 搞不定的部分，比如static 函数，搭配 PowerMock。</p><p><strong><em>数据库测试</em></strong>：使用 H2 Database 内存数据库。用 maven-surefire-plugin 多线程执行测试任务。</p><p><strong><em>功能测试</em></strong>：使用 jetty-maven-plugin。</p><p><strong><em>Performance/Stability Test</em></strong>：Jmeter。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发测试过程中会使用到的东西&lt;/p&gt;
    
    </summary>
    
    
      <category term="Utils" scheme="https://dwiwaiwns.github.io/tags/Utils/"/>
    
  </entry>
  
</feed>
